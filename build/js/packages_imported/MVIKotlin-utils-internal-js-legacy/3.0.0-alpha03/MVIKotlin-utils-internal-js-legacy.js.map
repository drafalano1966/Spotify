{"version":3,"file":"MVIKotlin-utils-internal-js-legacy.js","sources":["src/kotlin/util/Preconditions.kt","../../../../../utils-internal/src/commonMain/kotlin/com/arkivanov/mvikotlin/utils/internal/Atomic.kt","../../../../../utils-internal/src/commonMain/kotlin/com/arkivanov/mvikotlin/utils/internal/AtomicExt.kt","../../../../../utils-internal/src/commonMain/kotlin/com/arkivanov/mvikotlin/utils/internal/Logs.kt","../../../../../utils-internal/src/commonMain/kotlin/com/arkivanov/mvikotlin/utils/internal/MainThreadAssert.kt","../../../../../utils-internal/src/jsMain/kotlin/com/arkivanov/mvikotlin/utils/internal/Atomic.kt","../../../../../utils-internal/src/jsMain/kotlin/com/arkivanov/mvikotlin/utils/internal/Logs.kt","../../../../../utils-internal/src/jsMain/kotlin/com/arkivanov/mvikotlin/utils/internal/MainThreadAssert.kt","../../../../../utils-internal/src/jvmJsMain/kotlin/com/arkivanov/mvikotlin/utils/internal/Freeze.kt","../../../../../utils-internal/src/jvmJsMain/kotlin/com/arkivanov/mvikotlin/utils/internal/IsolatedRef.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n",null,null,null,null,null,null,null,null,null],"names":[],"mappings":";;;;;;;;;;;;;;;sCAoDA,mD;;;;;;;;;;;;;;;;;;;;;;;;ECvBA,kB;IAAuC,gBAAO,IAAP,C;G;ECzBvC,sC;IACI,IAAI,CAAC,gCAAc,IAAd,EAAoB,KAApB,CAAL,C;MACI,MAAM,2BAAsB,mCAAgC,SAAtD,C;KAEd,C;EAEA,iC;IAAgD,YAAe,e;IAAf,yB;IFsD5C,IAAI,aAAJ,C;MACI,cEvDgE,2B;MFwDhE,MAAM,8BAAyB,OAAQ,WAAjC,C;;MAEN,wBAAO,K;;IE1DiC,4B;G;EAEhD,gD;IAAsF,sB;G;EAEtF,uD;IACI,kBAAa,K;EACjB,C;EAEA,kD;IAA8E,sB;G;EAE9E,yD;IACI,kBAAa,K;EACjB,C;EAEA,kD;IAAmF,sB;G;EAEnF,yD;IACI,kBAAa,K;EACjB,C;EAEA,wC;IACI,Y;;MAEI,WAAW,e;;IACN,SAAC,gCAAc,QAAd,EAAwB,MAAM,QAAN,CAAxB,CAAD,C;IAET,OAAO,Q;EACX,C;;EC7BA,+B;IAA2C,aAAG,OAAH,WAAc,S;G;;;ECNzD,2C;WAAA,iF;G;EAAA,wE;IAAA,gH;G;;EAIA,8B;IACI,IAAI,iCAAJ,C;MJ4BA,IAAI,CI3BQ,cJ2BZ,C;QACI,cI3BI,4CAA0C,6B;QJ4B9C,MAAM,8BAAyB,OAAQ,WAAjC,C;QIzBd,C;EAQA,wB;IAUwB,UAAb,M;IARa,gBAAhB,e;IAAgB,qB;;MAYpB,OAAO,IAAP,C;QACI,QAAY,e;QACZ,IAAI,SAAJ,C;UACI,oBAAO,C;UAAP,sB;SAdA,SAAwB,iB;QACxB,IAAI,UAAJ,C;UACI,KAAK,6DAAL,C;SAeR,IAbI,uBAAmB,EAAnB,C;QAcJ,IAAI,gCAAc,IAAd,EAAoB,CAApB,CAAJ,C;UACI,oBAAO,C;UAAP,sB;;;;IArBR,oC;IASA,OAAO,WAAa,OAAb,YAAa,GAAb,4DAAwC,I;EACnD,C;EAEA,qC;IACI,OAAO,IAAP,C;MACI,QAAY,e;MACZ,IAAI,SAAJ,C;QACI,OAAO,C;OAGX,IAAI,M;MACJ,IAAI,gCAAc,IAAd,EAAoB,CAApB,CAAJ,C;QACI,OAAO,C;;EAGnB,C;EAIgC,gC;IAAC,Y;G;;;;;;EC/CjC,yB;IAAgD,yBAAc,KAAd,C;G;EAElB,8B;IAC1B,4B;G;;SAAA,Y;MAAA,2B;K;SAAA,iB;MAAA,4B;K;;kDAEA,2B;IACI,IAAI,IAAK,MAAL,KAAe,QAAnB,C;MACI,aAAa,K;MADjB,OAEI,I;;MAFJ,OAII,K;;G;;;;;;EAIZ,yB;IAAmD,6BAAkB,KAAlB,C;G;EAEpB,kC;IAC3B,4B;G;;SAAA,Y;MAAA,2B;K;SAAA,iB;MAAA,4B;K;;;;;;;EAGJ,yB;IAA2C,yBAAc,KAAd,C;G;EAEhB,8B;IACvB,4B;G;;SAAA,Y;MAAA,2B;K;SAAA,iB;MAAA,4B;K;;;;;;;ECvBJ,oB;IACI,OAAQ,KAAS,WAAL,IAAK,CAAT,C;EACZ,C;EAEA,oB;IACI,OAAQ,OAAW,WAAL,IAAK,CAAX,C;EACZ,C;ECNA,2B;IAAuD,yB;G;EAEvD,sC;IAAwE,W;G;EAExE,uC;IAA4D,oB;G;EAE5D,wB;G;;;;;;ECNA,sC;IAAgD,gB;G;EAEhD,2B;IAAqC,gB;G;EAEJ,iC;IAAQ,Y;G;ECJH,4B;IAClC,kB;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YNDyB,W;gCCAe,SAAO,IAAP,C;oBAEd,SAA4B,IAA5B,C;;;;"}